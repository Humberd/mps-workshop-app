package Furniture.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Garage_Project__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x34ef3d3158464526L, 0xae0c0b6af6b7afd7L, 0x5272a355c6ba1033L, "Furniture.structure.Garage_Project");

  public static final SMethod<Integer> getExpenses_id59MCPn6KRrz = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getExpenses").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("59MCPn6KRrz").build();
  public static final SMethod<Integer> getPrice_id59MCPn6Libq = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("getPrice").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("59MCPn6Libq").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getExpenses_id59MCPn6KRrz, getPrice_id59MCPn6Libq);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int getExpenses_id59MCPn6KRrz(@NotNull SNode __thisNode__) {
    final Wrappers._int expenses = new Wrappers._int(0);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$f3UU)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        expenses.value += SPropertyOperations.getInteger(it, PROPS.quantity$eYK0) * SPropertyOperations.getInteger(SLinkOperations.getTarget(it, LINKS.component$eYKY), PROPS.price$jR$B);
      }
    });
    return expenses.value;
  }
  /*package*/ static int getPrice_id59MCPn6Libq(@NotNull SNode __thisNode__) {
    return ((int) Garage_Project__BehaviorDescriptor.getExpenses_id59MCPn6KRrz.invoke(__thisNode__)) * 2;
  }

  /*package*/ Garage_Project__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) getExpenses_id59MCPn6KRrz(node));
      case 1:
        return (T) ((Integer) getPrice_id59MCPn6Libq(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$f3UU = MetaAdapterFactory.getContainmentLink(0x34ef3d3158464526L, 0xae0c0b6af6b7afd7L, 0x5272a355c6ba1033L, 0x5272a355c6ba103aL, "components");
    /*package*/ static final SReferenceLink component$eYKY = MetaAdapterFactory.getReferenceLink(0x34ef3d3158464526L, 0xae0c0b6af6b7afd7L, 0x5272a355c6ba102eL, 0x5272a355c6ba1031L, "component");
  }

  private static final class PROPS {
    /*package*/ static final SProperty price$jR$B = MetaAdapterFactory.getProperty(0x34ef3d3158464526L, 0xae0c0b6af6b7afd7L, 0x5272a355c6b778c4L, 0x5272a355c6b778c9L, "price");
    /*package*/ static final SProperty quantity$eYK0 = MetaAdapterFactory.getProperty(0x34ef3d3158464526L, 0xae0c0b6af6b7afd7L, 0x5272a355c6ba102eL, 0x5272a355c6ba102fL, "quantity");
  }
}
